name: Deploy Documentation to Vercel

on:
  push:
    branches:
      - '**'
    paths:
      - 'docs/**'
      - 'packages/*/src/**'
      - 'packages/*/package.json'
      - '.docs/**'
      - '.github/workflows/deploy-docs.yml'
  pull_request:
    branches:
      - '**'
    paths:
      - 'docs/**'
      - 'packages/*/src/**' 
      - 'packages/*/package.json'
      - '.docs/**'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.8.0'

      - name: Setup Documentation Template
        run: |
          pnpm dlx tsx scripts/setup-docs.ts --vercel
        env:
          CONSENT_GIT_TOKEN: ${{ secrets.CONSENT_GIT_TOKEN }}

      - name: Create Vercel Deployment via API
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: |
          set -euo pipefail
          cd .docs
          pnpm dlx tsx ../scripts/deploy.ts

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.issue.number;
            const marker = '<!-- c15t-docs-preview -->';
            const previewUrl = `${{ steps.deploy.outputs.url }}`;
            if (!previewUrl) {
              core.setFailed('No preview URL found in deploy step output.');
              return;
            }
            const body = `${marker}\nðŸ“– **Documentation Preview**\n\nðŸ”— Preview URL: ${previewUrl}\n\n*Updated with commit ${{ github.sha }}*`;

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number,
              per_page: 100,
            });
            const existing = comments.find(c => typeof c.body === 'string' && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }