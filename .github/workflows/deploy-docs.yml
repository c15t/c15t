name: Deploy Documentation to Vercel

on:
  push:
    branches:
      - '**'
    paths:
      - 'docs/**'
      - 'packages/*/src/**'
      - 'packages/*/package.json'
      - '.docs/**'
      - '.github/workflows/deploy-docs.yml'
  pull_request:
    branches:
      - '**'
    paths:
      - 'docs/**'
      - 'packages/*/src/**' 
      - 'packages/*/package.json'
      - '.docs/**'

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Documentation Template
        if: github.event_name != 'pull_request'
        run: |
          npx -y tsx scripts/setup-docs.ts --vercel
        env:
          CONSENT_GIT_TOKEN: ${{ secrets.CONSENT_GIT_TOKEN }}

      - name: Create Vercel Deployment via API
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: |
          set -euo pipefail
          cd .docs
          npx -y tsx ../scripts/deploy.ts

      - name: Find PR for this branch
        id: find_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CONSENT_GIT_TOKEN }}
          script: |
            const owner = 'c15t';
            const repo = context.repo.repo;
            let prNumber = context.issue?.number || '';
            if (!prNumber) {
              const ref = context.ref || '';
              const branch = ref.startsWith('refs/heads/') ? ref.replace('refs/heads/', '') : ref;
              const { data: prs } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                head: `${owner}:${branch}`,
                per_page: 1,
              });
              if (prs.length) {
                prNumber = String(prs[0].number);
              }
            }
            core.setOutput('pr_number', prNumber);

      - name: Comment PR with preview URL
        if: ${{ steps.find_pr.outputs.pr_number != '' }}
        uses: marocchino/sticky-pull-request-comment@v2
        env:
          GITHUB_TOKEN: ${{ secrets.CONSENT_GIT_TOKEN }}
        with:
          owner: consentdotio
          header: c15t-docs-preview
          number: ${{ steps.find_pr.outputs.pr_number }}
          message: |
            ðŸš€ Your documentation preview is ready!

            ðŸ”— Live URL: ${{ steps.deploy.outputs.url }}

            ðŸ§ª This sticky comment auto-updates on every push.
            ðŸ“¦ Source: branch `${{ github.ref_name }}` @ `${{ github.sha }}`