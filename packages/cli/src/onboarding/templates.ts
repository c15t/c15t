/**
 * Templates module for generating configuration files
 * These functions generate template configuration content for different storage modes
 */

/**
 * Generates client configuration file content based on storage mode
 *
 * @param mode - The storage mode ('c15t', 'offline', or 'custom')
 * @param backendURL - URL for the c15t backend/API (for 'c15t' mode)
 * @param useEnvFile - Whether to use environment variable for backendURL
 * @returns The generated configuration file content
 */
export function generateClientConfigContent(
	mode: string,
	backendURL?: string,
	useEnvFile?: boolean
): string {
	let configContent = '';

	// Validate mode parameter
	const validModes = ['c15t', 'offline', 'custom'];
	if (!validModes.includes(mode)) {
		throw new Error(
			`Invalid mode: ${mode}. Valid modes are: ${validModes.join(', ')}`
		);
	}

	switch (mode) {
		case 'c15t': {
			configContent = `// c15t Client Configuration
import type { ConsentManagerOptions } from '@c15t/react';

export const c15tConfig = {
  // Using hosted c15t (consent.io) or self-hosted instance
  mode: 'c15t',
  backendURL: ${useEnvFile ? 'process.env.NEXT_PUBLIC_C15T_URL' : `'${backendURL || 'https://your-instance.c15t.dev'}'`},
  
  // Optional: Add callback functions for various events
  callbacks: {
    onConsentSet: (response) => {
      console.log('Consent has been saved');
    }
  }
} satisfies ConsentManagerOptions;

// Use in your app layout:
// <ConsentManagerProvider options={c15tConfig}>
//   {children}
//   <CookieBanner />
//   <ConsentManagerDialog />
// </ConsentManagerProvider>
`;
			break;
		}
		case 'offline': {
			configContent = `// c15t Client Configuration
import type { ConsentManagerOptions } from '@c15t/react';

export const c15tConfig = {
  // Using offline mode for browser-based storage
  mode: 'offline',
  
  // Optional: Add callback functions for various events
  callbacks: {
    onConsentSet: (response) => {
      console.log('Consent has been saved locally');
    }
  }
} satisfies ConsentManagerOptions;

// Use in your app layout:
// <ConsentManagerProvider options={c15tConfig}>
//   {children}
//   <CookieBanner />
//   <ConsentManagerDialog />
// </ConsentManagerProvider>
`;
			break;
		}
		case 'custom': {
			configContent = `// c15t Client Configuration
import type { ConsentManagerOptions } from '@c15t/react';
import { createCustomHandlers } from './consent-handlers';

export const c15tConfig = {
  // Using custom mode for complete control
  mode: 'custom',
  endpointHandlers: createCustomHandlers(),
  
  // Optional: Add callback functions for various events
  callbacks: {
    onConsentSet: (response) => {
      console.log('Consent has been saved');
    }
  }
} satisfies ConsentManagerOptions;

// Use in your app layout:
// <ConsentManagerProvider options={c15tConfig}>
//   {children}
//   <CookieBanner />
//   <ConsentManagerDialog />
// </ConsentManagerProvider>

// Don't forget to implement your custom handlers in consent-handlers.ts!
`;
			break;
		}
	}

	return configContent;
}

/**
 * Generates backend configuration file content
 *
 * @param adapterChoice - The database adapter to use ('kysely-postgres', 'kysely-sqlite', or 'memory')
 * @param connectionString - Connection string for database (for 'kysely-postgres')
 * @param filePath - Path to the database file (for 'kysely-sqlite')
 * @returns The generated backend configuration file content
 */
export function generateBackendConfigContent(
	adapterChoice: string,
	connectionString?: string,
	filePath?: string
): string {
	let adapterImport = '';
	let adapterConfig = '';

	switch (adapterChoice) {
		case 'kysely-postgres': {
			adapterImport = `import { kyselyAdapter } from '@c15t/backend/db/adapters/kysely';\nimport { PostgresDialect } from 'kysely';\nimport { Pool } from 'pg';`;
			adapterConfig = `kyselyAdapter({
      dialect: new PostgresDialect({
        pool: new Pool({
          connectionString: ${connectionString ? `"${connectionString}"` : 'process.env.DATABASE_URL || "postgresql://user:password@host:port/db"'}
        })
      })
    })`;
			break;
		}
		case 'kysely-sqlite': {
			adapterImport = `import { kyselyAdapter } from '@c15t/backend/db/adapters/kysely';\nimport { SqliteDialect } from 'kysely';\nimport Database from 'better-sqlite3';`;
			adapterConfig = `kyselyAdapter({
      dialect: new SqliteDialect({
        database: new Database("${filePath || './db.sqlite'}")
      })
    })`;
			break;
		}
		default: {
			adapterImport = `import { memoryAdapter } from '@c15t/backend/db/adapters/memory';`;
			adapterConfig = 'memoryAdapter({})';
			break;
		}
	}

	return `// c15t Backend Configuration
// Generated by c15t CLI onboarding

import { c15tInstance } from '@c15t/backend';
${adapterImport}

// WARNING: Database connection strings often contain sensitive credentials.
// Consider using environment variables instead of hardcoding these values.

// Define your c15t instance
const instance = c15tInstance({
  appName: 'Your App Name',
  basePath: '/api/c15t',
  database: ${adapterConfig},
  trustedOrigins: ['http://localhost:3000'],
});

export default instance;
`;
}

/**
 * Generates environment file content with the c15t backend URL
 *
 * @param backendURL - The backend URL to use
 * @returns The generated environment file content
 */
export function generateEnvFileContent(backendURL: string): string {
	return `# c15t Configuration
# Note: This URL is public and can be safely committed to version control
NEXT_PUBLIC_C15T_URL=${backendURL}
`;
}
