import { sqliteTable, text, integer,  } from "drizzle-orm/sqlite-core";

export const subject = sqliteTable("subject", {
  id: text("id").primaryKey(),
  isIdentified: integer('is_identified', { mode: 'boolean' }).notNull(),
  externalId: text('external_id'),
  identityProvider: text('identity_provider'),
  lastIpAddress: text('last_ip_address'),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull(),
  updatedAt: integer('updated_at', { mode: 'timestamp' }).notNull(),
  subjectTimezone: text('subject_timezone')
});

export const consentPurpose = sqliteTable("consent_purpose", {
  id: text("id").primaryKey(),
  code: text('code').notNull(),
  name: text('name').notNull(),
  description: text('description').notNull(),
  isEssential: integer('is_essential', { mode: 'boolean' }).notNull(),
  dataCategory: text('data_category'),
  legalBasis: text('legal_basis'),
  isActive: integer('is_active', { mode: 'boolean' }).notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull(),
  updatedAt: integer('updated_at', { mode: 'timestamp' }).notNull()
});

export const consentPolicy = sqliteTable("consent_policy", {
  id: text("id").primaryKey(),
  version: text('version').notNull(),
  type: text('type').notNull(),
  name: text('name').notNull(),
  effectiveDate: integer('effective_date', { mode: 'timestamp' }).notNull(),
  expirationDate: integer('expiration_date', { mode: 'timestamp' }),
  content: text('content').notNull(),
  contentHash: text('content_hash').notNull(),
  isActive: integer('is_active', { mode: 'boolean' }).notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull()
});

export const domain = sqliteTable("domain", {
  id: text("id").primaryKey(),
  name: text('name').notNull().unique(),
  description: text('description'),
  allowedOrigins: text('allowed_origins'),
  isVerified: integer('is_verified', { mode: 'boolean' }).notNull(),
  isActive: integer('is_active', { mode: 'boolean' }).notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull(),
  updatedAt: integer('updated_at', { mode: 'timestamp' })
});

export const consent = sqliteTable("consent", {
  id: text("id").primaryKey(),
  subjectId: text('subject_id').notNull().references(()=> subject.id, { onDelete: 'cascade' }),
  domainId: text('domain_id').notNull().references(()=> domain.id, { onDelete: 'cascade' }),
  purposeIds: text('purpose_ids'),
  metadata: text('metadata'),
  policyId: text('policy_id').references(()=> consentPolicy.id, { onDelete: 'cascade' }),
  ipAddress: text('ip_address'),
  userAgent: text('user_agent'),
  status: text('status').notNull(),
  withdrawalReason: text('withdrawal_reason'),
  givenAt: integer('given_at', { mode: 'timestamp' }).notNull(),
  validUntil: integer('valid_until', { mode: 'timestamp' }),
  isActive: integer('is_active', { mode: 'boolean' }).notNull()
});

export const consentRecord = sqliteTable("consent_record", {
  id: text("id").primaryKey(),
  subjectId: text('subject_id').notNull().references(()=> subject.id, { onDelete: 'cascade' }),
  consentId: text('consent_id').references(()=> consent.id, { onDelete: 'cascade' }),
  actionType: text('action_type').notNull(),
  details: text('details'),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull()
});

export const auditLog = sqliteTable("audit_log", {
  id: text("id").primaryKey(),
  entityType: text('entity_type').notNull(),
  entityId: text('entity_id').notNull(),
  actionType: text('action_type').notNull(),
  subjectId: text('subject_id').references(()=> subject.id, { onDelete: 'cascade' }),
  ipAddress: text('ip_address'),
  userAgent: text('user_agent'),
  changes: text('changes'),
  metadata: text('metadata'),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull(),
  eventTimezone: text('event_timezone').notNull()
});