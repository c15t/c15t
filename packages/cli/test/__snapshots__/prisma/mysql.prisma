
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Subject {
  id               String          @id
  isIdentified     Boolean
  externalId       String?         @db.Text
  identityProvider String?         @db.Text
  lastIpAddress    String?         @db.Text
  createdAt        DateTime
  updatedAt        DateTime
  subjectTimezone  String
  consents         Consent[]
  consentrecords   ConsentRecord[]
  auditlogs        AuditLog[]
}

model ConsentPurpose {
  id           String   @id
  code         String   @db.Text
  name         String   @db.Text
  description  String   @db.Text
  isEssential  Boolean
  dataCategory String?  @db.Text
  legalBasis   String?  @db.Text
  isActive     Boolean
  createdAt    DateTime
  updatedAt    DateTime
}

model ConsentPolicy {
  id             String    @id
  version        String    @db.Text
  type           String    @db.Text
  name           String    @db.Text
  effectiveDate  DateTime
  expirationDate DateTime?
  content        String    @db.Text
  contentHash    String    @db.Text
  isActive       Boolean
  createdAt      DateTime
  consents       Consent[]
}

model Domain {
  id             String    @id
  name           String
  description    String?   @db.Text
  allowedOrigins Json?
  isVerified     Boolean
  isActive       Boolean
  createdAt      DateTime
  updatedAt      DateTime?
  consents       Consent[]

  @@unique([name])
}

model Consent {
  id               String          @id
  subjectId        String
  subject          Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  domainId         String
  domain           Domain          @relation(fields: [domainId], references: [id], onDelete: Cascade)
  purposeIds       Json?
  metadata         Json?
  policyId         String?
  consentpolicy    ConsentPolicy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  ipAddress        String?         @db.Text
  userAgent        String?         @db.Text
  status           String          @db.Text
  withdrawalReason String?         @db.Text
  givenAt          DateTime
  validUntil       DateTime?
  isActive         Boolean
  consentrecords   ConsentRecord[]
}

model ConsentRecord {
  id         String   @id
  subjectId  String
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  consentId  String?
  consent    Consent  @relation(fields: [consentId], references: [id], onDelete: Cascade)
  actionType String   @db.Text
  details    Json?
  createdAt  DateTime
}

model AuditLog {
  id            String   @id
  entityType    String   @db.Text
  entityId      String   @db.Text
  actionType    String   @db.Text
  subjectId     String?
  subject       Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  ipAddress     String?  @db.Text
  userAgent     String?  @db.Text
  changes       Json?
  metadata      Json?
  createdAt     DateTime
  eventTimezone String
}
