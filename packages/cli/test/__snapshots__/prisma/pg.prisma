
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subject {
  id               String          @id
  isIdentified     Boolean
  externalId       String?
  identityProvider String?
  lastIpAddress    String?
  createdAt        DateTime
  updatedAt        DateTime
  subjectTimezone  String
  consents         Consent[]
  consentrecords   ConsentRecord[]
  auditlogs        AuditLog[]
}

model ConsentPurpose {
  id           String   @id
  code         String
  name         String
  description  String
  isEssential  Boolean
  dataCategory String?
  legalBasis   String?
  isActive     Boolean
  createdAt    DateTime
  updatedAt    DateTime
}

model ConsentPolicy {
  id             String    @id
  version        String
  type           String
  name           String
  effectiveDate  DateTime
  expirationDate DateTime?
  content        String
  contentHash    String
  isActive       Boolean
  createdAt      DateTime
  consents       Consent[]
}

model Domain {
  id             String    @id
  name           String
  description    String?
  allowedOrigins Json?
  isVerified     Boolean
  isActive       Boolean
  createdAt      DateTime
  updatedAt      DateTime?
  consents       Consent[]

  @@unique([name])
}

model Consent {
  id                      String                   @id
  subjectId               String
  subject                 Subject                  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  domainId                String
  domain                  Domain                   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  purposeIds              Json?
  consentpurpose          ConsentPurpose           @relation(fields: [purposeIds], references: [id], onDelete: Cascade)
  metadata                Json?
  policyId                String?
  consentpolicy           ConsentPolicy            @relation(fields: [policyId], references: [id], onDelete: Cascade)
  ipAddress               String?
  userAgent               String?
  status                  String
  withdrawalReason        String?
  givenAt                 DateTime
  validUntil              DateTime?
  isActive                Boolean
  consentpurposejunctions ConsentPurposeJunction[]
  consentrecords          ConsentRecord[]
  consentgeolocations     ConsentGeoLocation[]
  consentwithdrawals      ConsentWithdrawal[]
}

model ConsentPurposeJunction {
  id             String         @id
  consentId      String
  consent        Consent        @relation(fields: [consentId], references: [id], onDelete: Cascade)
  purposeId      String
  consentpurpose ConsentPurpose @relation(fields: [purposeId], references: [id], onDelete: Cascade)
  status         String
  metadata       Json?
  createdAt      DateTime
  updatedAt      DateTime?
}

model ConsentRecord {
  id         String   @id
  subjectId  String
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  consentId  String?
  consent    Consent  @relation(fields: [consentId], references: [id], onDelete: Cascade)
  actionType String
  details    Json?
  createdAt  DateTime
}

model AuditLog {
  id            String   @id
  entityType    String
  entityId      String
  actionType    String
  subjectId     String?
  subject       Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  ipAddress     String?
  userAgent     String?
  changes       Json?
  metadata      Json?
  createdAt     DateTime
  eventTimezone String
}
